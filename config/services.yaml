# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    tolerance: 2
    notification_interval:
        default: 4
        slack: 1
        email: 24
    email_from: '%env(EMAIL_FROM)%'
    email_to: '%env(EMAIL_TO)%'

    sslcheck:
        olderthan: 7
        notification:
            slack: 7
            email: 14


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    App\Service\:
      resource: '../src/Service'
      public: true

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones


    App\Listener\SlackNotifyListener:
        tags:
          - { name: kernel.event_listener, event: 'website.ping', method: 'notify' }

    App\Listener\SSLCheckListener:
        class: App\Listener\SSlCheckListener
        arguments: ['@doctrine.orm.default_entity_manager']
        tags:
          - { name: kernel.event_listener, event: 'ssl.check', method: 'onCheck' }

    App\Listener\SSLNotifyListener:
        class: App\Listener\SSlNotifyListener
#        arguments: ['@doctrine.orm.default_entity_manager','@twig','@swiftmailer.mailer.default']
        tags:
            - { name: kernel.event_listener, event: 'notify', method: 'onNotify' }

